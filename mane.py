"""–î–∞–ª—å—à–µ –±–æ–≥–∞ –Ω–µ—Ç.
   —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ -> http://t.me/ndflDok_bot"""

from aiogram.dispatcher.filters import Text
import jsone
import apps
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
import datetime
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import BotCommand, ReplyKeyboardMarkup, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text

storage = MemoryStorage()

TOKEN = "5614187069:AAFxZNIR2tNpFLFWQ2IirgubkPBQNQzLMos"
chatbot = Bot(token=TOKEN)
dp = Dispatcher(chatbot, storage=storage)

'''–ù–∞—á–∞–ª–æ –±–æ—Ç–∞ - –∫–æ–º–∞–Ω–¥–∞ start.'''
class UserState(StatesGroup):
    question = State()

'''–ù–∞—á–∞–ª–æ –±–æ—Ç–∞ - –∫–æ–º–∞–Ω–¥–∞ start.'''

@dp.message_handler(commands=["start"])
async def start_message(message: types.Message):
    inline_btn_hello = InlineKeyboardButton('–ü—Ä–∏–≤–µ—Ç üëã', callback_data='button1')
    inline_btn_reg = InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="button2")
    inline_btn_qst = InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="button3")
    inline_kb1 = InlineKeyboardMarkup().add(inline_btn_hello, inline_btn_reg, inline_btn_qst)
    await message.reply("–ü—Ä–∏–≤–µ—Ç, –ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!–Ø —Å —Ä–∞–¥–æ—Å—Ç—å—é –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—á—É.\n"
                        "–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.", reply_markup=inline_kb1)


@dp.message_handler(commands=["help"])
async def help_message(message: types.Message):
    await message.reply("–ü–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏...\n"
                        "/start - –ù–∞—á–∞–ª–æ –±–æ—Ç–∞. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. 1Ô∏è‚É£\n"
                        "/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º. 2Ô∏è‚É£\n"
                        "/communicaton - –æ–±—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. 3Ô∏è‚É£\n")

@dp.message_handler(commands=["communication"])
async def mes_communication(message: types.Message):
    button_moder = KeyboardButton("–ü–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
    all_button = ReplyKeyboardMarkup(resize_keyboard=True).add(button_moder)
    await message.reply("–†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω.", reply_markup=all_button)


@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await chatbot.send_message(callback_query.from_user.id, '–ü—Ä–∏–≤–µ—Ç üëã')

@dp.callback_query_handler(lambda c: c.data == 'button3')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await chatbot.send_message(callback_query.from_user.id, "–ü–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∞ —è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    await UserState.question.set()

@dp.message_handler(state=UserState.question)
async def get_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)
    a = datetime.datetime.now()
    apps.Db().insert_message(message.from_user.id, message.text, str(a))
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
@dp.callback_query_handler(lambda c: c.data == 'button2')
async def process_callback_button1(callback_query: types.CallbackQuery):

    inline_btn_tel = KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òé', request_contact=True)
    bk_reg = ReplyKeyboardMarkup(resize_keyboard=True).add(inline_btn_tel)
    await chatbot.send_message(callback_query.from_user.id, f"–í–∞—à –õ–æ–≥–∏–Ω: {callback_query.from_user.id}")
    await chatbot.send_message(callback_query.from_user.id,
                               "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–ª–∏, –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                               reply_markup=bk_reg)

@dp.message_handler(commands=["task"])
async def tasks(message: types.Message):
    all_qst = ReplyKeyboardMarkup(row_width=1)
    for i in range(0, len(jsone.get_question_json().keys())):
        button = types.KeyboardButton(f'{list(jsone.get_question_json().keys())[i]}')
        all_qst.add(button)
    await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=all_qst)

@dp.message_handler(content_types=['contact'])
async def mes_phone(message: types.Message):
    if message.contact is not None:
        apps.Db().insert_user(message.contact.user_id, message.contact.phone_number, "Telegram")
@dp.message_handler(lambda message: message.text in list(jsone.get_question_json().keys()))
async def answer_qst(message: types.Message):
    await message.reply(jsone.get_question_json().get(message.text))

@dp.message_handler(lambda message: message.text == "–ü–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
async def mes_text(message: types.Message):
    await message.reply("–°–µ–π—á–∞—Å –∫ –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä.\n–û–∂–∏–¥–∞–π—Ç–µ.....")

@dp.message_handler(lambda message: message.text)
async def mes_fast(message: types.Message):
    key_1 = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="but5")
    cancel = InlineKeyboardMarkup().add(key_1)
    await message.reply("–°–∫–æ—Ä–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤–∞–º –ø–æ–º–æ–∂–µ—Ç. –û–∂–∏–¥–∞–π—Ç–µ..", reply_markup=cancel)
@dp.message_handler(lambda message: message.text == "–Ø –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å...")
async def mes_answer(message: types.Message):
    await message.reply("–í–∞–º —Å–∫–æ—Ä–æ –ø–æ–º–æ–∂–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä :)")

@dp.callback_query_handler(lambda c: c.data == 'but5')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await chatbot.send_message(callback_query.from_user.id, "–í–æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")



if __name__ == "__main__":
    executor.start_polling(dp)
