"""–î–∞–ª—å—à–µ –±–æ–≥–∞ –Ω–µ—Ç.
   —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ -> http://t.me/ndflDok_bot"""

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import BotCommand, ReplyKeyboardMarkup, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text

TOKEN = "5614187069:AAFxZNIR2tNpFLFWQ2IirgubkPBQNQzLMos"
chatbot = Bot(token=TOKEN)
dp = Dispatcher(chatbot)

'''–ù–∞—á–∞–ª–æ –±–æ—Ç–∞ - –∫–æ–º–∞–Ω–¥–∞ start.'''
@dp.message_handler(commands=["start"])
async def start_message(message: types.Message):
    inline_btn_hello = InlineKeyboardButton('–ü—Ä–∏–≤–µ—Ç üëã', callback_data='button1')
    inline_kb1 = InlineKeyboardMarkup().add(inline_btn_hello)
    await message.reply("–ü—Ä–∏–≤–µ—Ç, –ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!–Ø —Å —Ä–∞–¥–æ—Å—Ç—å—é –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—á—É.", reply_markup=inline_kb1)

@dp.message_handler(commands=["help"])
async def help_message(message: types.Message):
    await message.reply("–ü–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏...\n"
                        "/start - –ù–∞—á–∞–ª–æ –±–æ—Ç–∞. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. 1Ô∏è‚É£\n"
                        "/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º. 2Ô∏è‚É£\n"
                        "/communicaton - –æ–±—â–µ–Ω–∏–µ —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏. 3Ô∏è‚É£")
@dp.message_handler(commands=["communication"])
async def mes_communication(message: types.Message):
    button_moder = KeyboardButton("–ü–æ–º–æ—â—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ‚òé")
    button_admin = KeyboardButton("–ü–æ–º–æ—â—å –ê–¥–º–∏–Ω–∞ ‚òé")
    all_button = ReplyKeyboardMarkup(resize_keyboard=True).add(button_moder, button_admin)
    await message.reply("–†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω.", reply_markup=all_button)

@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await chatbot.send_message(callback_query.from_user.id, '–ü—Ä–∏–≤–µ—Ç üëã')

@dp.message_handler(lambda message: message.text == "–ü–æ–º–æ—â—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ‚òé")
async def mes_answer(message: types.Message):
    await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ....")

@dp.message_handler(lambda message: message.text == "–ü–æ–º–æ—â—å –ê–¥–º–∏–Ω–∞ ‚òé")
async def mes_answer(message: types.Message):
    await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ....")
if __name__ == "__main__":
    executor.start_polling(dp)